package main;

import model.Customer;
import repository.CustomerRepository;
import service.CustomerService;
import java.util.stream.Collectors;
import java.text.Collator;
import java.util.Locale;

import java.io.File;
import java.util.*;

public class Main {
    public static void main(String[] args) {
        CustomerRepository repository = new CustomerRepository();
        CustomerService service = new CustomerService();
        Scanner scanner = new Scanner(System.in);

        List<Customer> customers = new ArrayList<>();
        customers.add(new Customer(1, "–û–ª–µ–∫—Å–∞–Ω–¥—Ä –ë–æ–π–∫–æ", "–ö–∏—ó–≤", "1234567812345678", 1000.0, 5, 5000.0));
        customers.add(new Customer(2, "–ê–Ω–Ω–∞ –Ü–≤–∞–Ω–æ–≤–∞", "–õ—å–≤—ñ–≤", "8765432187654321", -500.0, 3, 3000.0));
        customers.add(new Customer(3, "–Ü–Ω–∞ –Ü–≤–∞–Ω–æ–≤–∞", "–õ—å–≤—ñ–≤", "8765432187654324", 7000.0, 3, 9000.0));
        customers.add(new Customer(4, "–ú–∞—Ä–∏–Ω–∞ –Ü–≤–∞–Ω–æ–≤–∞", "–õ—å–≤—ñ–≤", "8765432187654323", 300.0, 7, 6000.0));
        customers.add(new Customer(5, "–ü–µ—Ç—Ä–æ –ü–µ—Ç—Ä–µ–Ω–∫–æ", "–û–¥–µ—Å–∞", "1111222233334444", 200.0, 2, 1000.0));
        customers.add(new Customer(6, "–Ü–≤–∞–Ω –ü–µ—Ç—Ä–µ–Ω–∫–æ", "–û–¥–µ—Å–∞", "1111222233334443", 200.0, 5, 10000.0));


        File file = new File("customers.dat");

        while (true) {
            System.out.println("\n–ú–µ–Ω—é:");
            System.out.println("1. –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ —ñ–º‚Äô—è–º");
            System.out.println("2. –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ –∫–∞—Ä—Ç–∫–æ—é");
            System.out.println("3. –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω–æ—Å—Ç–µ–π");
            System.out.println("4. –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –ø–æ–∫—É–ø—Ü—ñ–≤");
            System.out.println("5. –ü–æ—à—É–∫ –ø–æ–∫—É–ø—Ü—è");
            System.out.println("6. –£–Ω—ñ–∫–∞–ª—å–Ω—ñ –º—ñ—Å—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó");
            System.out.println("7. –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –ø–æ –º—ñ—Å—Ç–∞—Ö");
            System.out.println("8. –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –≤–∏—Ç—Ä–∞—Ç –ø–æ –º—ñ—Å—Ç–∞—Ö");
            System.out.println("9. –í–∏—Ö—ñ–¥");

            try {
                int choice = scanner.nextInt();
                scanner.nextLine(); // –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ —á–∏—Å–ª–∞

                switch (choice) {
                    case 1 -> {
                        System.out.print("–í–≤–µ–¥—ñ—Ç—å –ø–æ—á–∞—Ç–∫–æ–≤—ñ –ª—ñ—Ç–µ—Ä–∏ —ñ–º–µ–Ω—ñ: ");
                        String prefix = scanner.nextLine();
                        service.filterByNamePrefix(customers, prefix).forEach(System.out::println);
                    }
                    case 2 -> {
                        System.out.print("–í–≤–µ–¥—ñ—Ç—å –ø–æ—á–∞—Ç–æ–∫ –¥—ñ–∞–ø–∞–∑–æ–Ω—É –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç–∫–∏: ");
                        String start = scanner.nextLine();
                        System.out.print("–í–≤–µ–¥—ñ—Ç—å –∫—ñ–Ω–µ—Ü—å –¥—ñ–∞–ø–∞–∑–æ–Ω—É –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç–∫–∏: ");
                        String end = scanner.nextLine();
                        service.filterByCreditCardRange(customers, start, end).forEach(System.out::println);
                    }
                    case 3 -> service.filterByNegativeBalance(customers).forEach(System.out::println);
                    case 4 -> service.sortByTotalSpentAndName(customers).forEach(System.out::println);
                    case 5 -> {
                        System.out.print("–í–≤–µ–¥—ñ—Ç—å —ñ–º‚Äô—è –ø–æ–∫—É–ø—Ü—è: ");
                        String name = scanner.nextLine();
                        service.findExactCustomerByName(customers, name).ifPresentOrElse(
                                c -> System.out.println("–°–µ—Ä–µ–¥–Ω—è –≤–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏: " + c.getAveragePurchase()),
                                () -> System.out.println("–ü–æ–∫—É–ø—Ü—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
                        );
                    }
                    case 6 -> {
                        System.out.print("–í–≤–µ–¥—ñ—Ç—å –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–∫—É–ø–æ–∫ n: ");
                        int n = scanner.nextInt();
                        scanner.nextLine(); // –û—á–∏—Å—Ç–∫–∞ –≤–≤–æ–¥–∞

                        Set<String> cities = customers.stream()
                                .collect(Collectors.groupingBy(Customer::getCity, Collectors.summingInt(Customer::getPurchaseCount)))
                                .entrySet().stream()
                                .filter(entry -> entry.getValue() > n)
                                .map(Map.Entry::getKey)
                                .collect(Collectors.toSet());

                        System.out.println("–ú—ñ—Å—Ç–∞ –∑ —Å—É–º–∞—Ä–Ω–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –ø–æ–∫—É–ø–æ–∫ > " + n + ": " + cities);
                    }
                    case 7 -> {
                        Map<String, List<Customer>> grouped = customers.stream()
                                .collect(Collectors.groupingBy(Customer::getCity));

                        System.out.println("\n–ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –ø–æ–∫—É–ø—Ü—ñ–≤ –ø–æ –º—ñ—Å—Ç–∞—Ö (–≤ –∞–ª—Ñ–∞–≤—ñ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É –∑–∞ —ñ–º–µ–Ω–∞–º–∏):");
                        grouped.forEach((city, customerList) -> {
                            System.out.println("üîπ " + city);
                            customerList.stream()
                                    .sorted(Comparator.comparing(Customer::getFullName, Collator.getInstance(new Locale("uk", "UA")))) // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–º—É –∞–ª—Ñ–∞–≤–∏—Ç—É
                                    .forEach(customer -> System.out.println("   - " + customer.getFullName()));
                        });
                    }
                    case 8 -> System.out.println(service.totalSpentByCity(customers));
                    case 9 -> {
                        System.out.println("–í–∏—Ö—ñ–¥ –∑ –ø—Ä–æ–≥—Ä–∞–º–∏...");
                        System.exit(0);
                    }
                    default -> System.out.println("–ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!");
                }
            } catch (InputMismatchException e) {
                System.out.println("–ü–æ–º–∏–ª–∫–∞ –≤–≤–æ–¥—É! –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 9.");
                scanner.nextLine(); // –û—á–∏—Å—Ç–∫–∞ –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–∫–∏
            }
        }
    }
}